// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id               Int            @id @default(autoincrement())
  username         String         @unique
  email            String         @unique
  password         String
  profileImage     String? // Profile picture URL
  status           String? // Custom status message
  online           Boolean        @default(false) // Presence indicator
  messagesSent     Message[]      @relation("SentMessages")
  messagesReceived Message[]      @relation("ReceivedMessages")
  groupMemberships GroupMember[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  reactions        Reaction[]
  files            File[]
  notifications    Notification[]

  @@map("users")
}

model Message {
  id          String     @id @default(uuid())
  content     String?
  mediaUrl    String? // For image, video, audio, or other file attachments
  sender      User       @relation("SentMessages", fields: [senderId], references: [id])
  senderId    Int
  recipient   User?      @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId Int?
  group       Group?     @relation(fields: [groupId], references: [id])
  groupId     String?
  isRead      Boolean    @default(false) // Read receipt
  createdAt   DateTime   @default(now())
  reactions   Reaction[]
  files       File[]

  @@map("messages")
}

// Group model for group chat
model Group {
  id        String        @id @default(uuid())
  name      String
  imageUrl  String? // Group profile picture
  members   GroupMember[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  Message   Message[]

  @@map("groups")
}

// GroupMember model to manage many-to-many relationship between Users and Groups
model GroupMember {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  createdAt DateTime @default(now())

  @@map("group_members")
}

// Reaction model for reacting to messages
model Reaction {
  id        Int      @id @default(autoincrement())
  emoji     String // Emoji for reaction
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   Message? @relation(fields: [messageId], references: [id])
  messageId String?
  createdAt DateTime @default(now())

  @@map("reactions")
}

// File model for handling file sharing
model File {
  id        Int      @id @default(autoincrement())
  url       String // URL to the file
  type      FileType // Enum to represent file types
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  Int
  message   Message? @relation(fields: [messageId], references: [id])
  messageId String?
  createdAt DateTime @default(now())

  @@map("files")
}

// Enum for File types
enum FileType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

// Notification model for managing notifications
model Notification {
  id        Int              @id @default(autoincrement())
  type      NotificationType
  user      User             @relation(fields: [userId], references: [id])
  userId    Int
  message   String // Notification content
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@map("notifications")
}

// Enum for Notification types
enum NotificationType {
  MESSAGE
  CALL
  REACTION
  FILE
  OTHER
}
